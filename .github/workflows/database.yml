name: Database Migration

on:
  push:
    branches: [ main, 'feat/*', 'fix/*' ]
    paths:
      - 'backend/db/migration/**'
      - '.github/workflows/database.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/db/migration/**'
      - '.github/workflows/database.yml'
  workflow_dispatch:

permissions:
  actions: read           # Potentially needed for private repositories
  id-token: write         # Required for OIDC authentication

jobs:
  migrate-dev:
    name: Run Migrations on Development
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Install Flyway CLI
      run: |
        wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.22.3/flyway-commandline-9.22.3-linux-x64.tar.gz | tar xvz
        sudo mv flyway-9.22.3 /opt/flyway
        sudo ln -s /opt/flyway/flyway /usr/local/bin/flyway

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    
    # Azure authentication using OIDC
    - name: Azure Login with OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    # Get secrets from Key Vault
    - name: Get secrets from Key Vault
      id: keyvault
      run: |
        # Get the Key Vault name from GitHub variables configured in the environment
        KEY_VAULT_NAME="${{ vars.KEYVAULT_NAME }}"
        echo "Retrieving secrets from Key Vault: $KEY_VAULT_NAME"
        
        # Get JDBC connection string
        JDBC_CONNECTION=$(az keyvault secret show --name jdbc-connection-string --vault-name "$KEY_VAULT_NAME" --query value -o tsv)
        echo "::add-mask::$JDBC_CONNECTION"
        echo "jdbc_connection=$JDBC_CONNECTION" >> $GITHUB_OUTPUT
        
        # Get SQL admin username
        SQL_USERNAME=$(az keyvault secret show --name sql-admin-username --vault-name "$KEY_VAULT_NAME" --query value -o tsv)
        echo "::add-mask::$SQL_USERNAME"
        echo "sql_username=$SQL_USERNAME" >> $GITHUB_OUTPUT
        
        # Get SQL admin password
        SQL_PASSWORD=$(az keyvault secret show --name sql-admin-password --vault-name "$KEY_VAULT_NAME" --query value -o tsv)
        echo "::add-mask::$SQL_PASSWORD"
        echo "sql_password=$SQL_PASSWORD" >> $GITHUB_OUTPUT
        
    - name: Run Database Migrations in Development
      working-directory: ./backend/db
      env:
        FLYWAY_URL: ${{ steps.keyvault.outputs.jdbc_connection }}
        FLYWAY_USER: ${{ steps.keyvault.outputs.sql_username }}
        FLYWAY_PASSWORD: ${{ steps.keyvault.outputs.sql_password }}
      run: |
        # Create a temporary flyway.conf file with secrets
        echo "flyway.url=${FLYWAY_URL}" > flyway-ci.conf
        echo "flyway.user=${FLYWAY_USER}" >> flyway-ci.conf
        echo "flyway.password=${FLYWAY_PASSWORD}" >> flyway-ci.conf
        echo "flyway.locations=filesystem:migration" >> flyway-ci.conf
        
        # Validate the migration scripts against this environment
        echo "Validating migration scripts against development environment..."
        flyway -configFiles=flyway-ci.conf validate
        
        # First run info to show what migrations will be applied
        echo "Showing pending migrations..."
        flyway -configFiles=flyway-ci.conf info
        
        # Apply migrations
        echo "Applying migrations to development environment..."
        flyway -configFiles=flyway-ci.conf migrate
        
        # Clean up
        rm flyway-ci.conf

  migrate-prod:
    name: Run Migrations on Production
    needs: migrate-dev
    if: success()
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Install Flyway CLI
      run: |
        wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.22.3/flyway-commandline-9.22.3-linux-x64.tar.gz | tar xvz
        sudo mv flyway-9.22.3 /opt/flyway
        sudo ln -s /opt/flyway/flyway /usr/local/bin/flyway

    # Azure authentication using OIDC
    - name: Azure Login with OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    # Get secrets from Key Vault
    - name: Get secrets from Key Vault
      id: keyvault
      run: |
        # Get the Key Vault name from GitHub variables configured in the environment
        KEY_VAULT_NAME="${{ vars.KEYVAULT_NAME }}"
        echo "Retrieving secrets from Key Vault: $KEY_VAULT_NAME"
        
        # Get JDBC connection string
        JDBC_CONNECTION=$(az keyvault secret show --name jdbc-connection-string --vault-name "$KEY_VAULT_NAME" --query value -o tsv)
        echo "::add-mask::$JDBC_CONNECTION"
        echo "jdbc_connection=$JDBC_CONNECTION" >> $GITHUB_OUTPUT
        
        # Get SQL admin username
        SQL_USERNAME=$(az keyvault secret show --name sql-admin-username --vault-name "$KEY_VAULT_NAME" --query value -o tsv)
        echo "::add-mask::$SQL_USERNAME"
        echo "sql_username=$SQL_USERNAME" >> $GITHUB_OUTPUT
        
        # Get SQL admin password
        SQL_PASSWORD=$(az keyvault secret show --name sql-admin-password --vault-name "$KEY_VAULT_NAME" --query value -o tsv)
        echo "::add-mask::$SQL_PASSWORD"
        echo "sql_password=$SQL_PASSWORD" >> $GITHUB_OUTPUT
        
    - name: Run Database Migrations in Production
      working-directory: ./backend/db
      env:
        FLYWAY_URL: ${{ steps.keyvault.outputs.jdbc_connection }}
        FLYWAY_USER: ${{ steps.keyvault.outputs.sql_username }}
        FLYWAY_PASSWORD: ${{ steps.keyvault.outputs.sql_password }}
      run: |
        # Create a temporary flyway.conf file with secrets
        echo "flyway.url=${FLYWAY_URL}" > flyway-ci.conf
        echo "flyway.user=${FLYWAY_USER}" >> flyway-ci.conf
        echo "flyway.password=${FLYWAY_PASSWORD}" >> flyway-ci.conf
        echo "flyway.locations=filesystem:migration" >> flyway-ci.conf
        
        # Validate the migration scripts against this environment
        echo "Validating migration scripts against production environment..."
        flyway -configFiles=flyway-ci.conf validate
        
        # First run info to show what migrations will be applied
        echo "Showing pending migrations..."
        flyway -configFiles=flyway-ci.conf info
        
        # Apply migrations
        echo "Applying migrations to production environment..."
        flyway -configFiles=flyway-ci.conf migrate
        
        # Clean up
        rm flyway-ci.conf

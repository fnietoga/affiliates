name: 'Terraform CI/CD Pipeline'

on:
  push:
    branches: [ main, 'feat/*', 'fix/*' ]
    paths:
      - 'iac/terraform/**'
      - '.github/workflows/terraform*.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'iac/terraform/**'
      - '.github/workflows/terraform*.yml'
  workflow_dispatch:

permissions:
  security-events: write  # Needed to upload-sarif
  contents: write         # Needed to clone repo and commit format changes
  actions: read           # Potentially needed for private repositories
  id-token: write         # Required for OIDC authentication

# The OIDC configuration for Azure authentication is handled by the script at /iac/scripts/setup-oidc.ps1
# This script sets up the application registration, service principal and federated credentials needed for OIDC
env:
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true   # Enable OIDC authentication
  # Storage Account Resource ID is stored as a secret in each GitHub Environment

jobs:
  validate-and-plan:
    name: 'Validate & Plan'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac/terraform
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout repository
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    # Initialize a new or existing Terraform working directory
    # Using backend=false for validation to avoid needing credentials
    - name: Terraform Init (Validation)
      run: terraform init -backend=false

    # Validate terraform files
    - name: Terraform Validate
      run: terraform validate

    # Format Terraform code - with pull requests, formats directly
    - name: Terraform Format
      if: github.event_name == 'pull_request'
      run: terraform fmt -check -recursive

    # Only checks formatting for non-pull request events
    - name: Check Terraform Format
      if: github.event_name != 'pull_request'
      run: terraform fmt -recursive
 
    # Auto-commit formatting changes for non-pull request events
    - name: Auto Commit Format Changes
      if: github.event_name != 'pull_request'
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "Terraform fmt: Automatic code formatting"
        file_pattern: "*.tf *.tfvars"
        commit_user_name: "github-actions[bot]"
        commit_user_email: "github-actions[bot]@users.noreply.github.com"
        commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
    
    # Perform a security scan of the terraform code using checkov
    - name: Run Checkov Security Scan
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with: 
        framework: terraform
        directory: ./iac/terraform
        skip_check: CKV_AZURE_4,CKV_AZURE_35 # Skip specific checks if needed
        quiet: true # Optional: display only failed checks

    # Upload results to GitHub Advanced Security
    - name: Upload SARIF file
      if: success() || failure()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
        category: checkov
        
  # Deployment to development environment
  deploy-dev:
    name: 'Deploy - Development Environment'
    needs: validate-and-plan
    # Allow execution on any branch
    uses: ./.github/workflows/terraform-deploy.yml
    with:
      environment: 'Development'
      environment_name: 'development'
      config_file: 'development.tfvars'
      backend_file: 'development.tfvars'
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TERRAFORM_STATE_RESOURCE_ID: ${{ secrets.AZURE_TERRAFORM_STATE_RESOURCE_ID }}

  # Deployment to production environment (requires manual approval)
  deploy-prod:
    name: 'Deploy - Production Environment'
    needs: deploy-dev # Requires the development deployment to complete first
    # Only run on push to main, not on pull requests
    if: github.event_name != 'pull_request'
    # Environment protection rules handle approvals
    uses: ./.github/workflows/terraform-deploy.yml
    with:
      environment: 'Production'
      environment_name: 'production'
      config_file: 'production.tfvars'
      backend_file: 'production.tfvars'
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TERRAFORM_STATE_RESOURCE_ID: ${{ secrets.AZURE_TERRAFORM_STATE_RESOURCE_ID }}
    